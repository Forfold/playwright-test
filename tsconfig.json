{
  "compilerOptions": {
    /* Language and Environment */
    "target": "es2016",                                  /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */

    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    "rootDir": "./src",                                  /* Specify the root folder within your source files. */
    "baseUrl": "./src",                                  /* Specify the base directory to resolve non-relative module names. */
    "typeRoots": ["./node_modules/@types", "./types"],   /* Specify multiple folders that act like `./node_modules/@types`. */
    "types": ["./types"],                                /* Specify type package names to be included without being referenced in a source file. */

    /* Emit */
    "declaration": true,                                 /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    "outDir": "dist",                                    /* Specify an output folder for all emitted files. */
    "removeComments": true,                              /* Disable emitting comments. */

    /* Interop Constraints */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    "forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */

    /* Type Checking */
    "strict": true,                                      /* Enable all strict type-checking options. */
    "noImplicitAny": true,                               /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    "strictNullChecks": true,                            /* When type checking, take into account `null` and `undefined`. */
    "strictFunctionTypes": true,                         /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    "noUnusedLocals": true,                              /* Enable error reporting when a local variables aren't read. */
    "noUnusedParameters": true,                          /* Raise an error when a function parameter isn't read */

  },
  "include": [
    "./src",
    "types/**/*.d.ts",
    "example/playwright/globalSetup.ts"
  ],
  "exclude": [
    "example/playwright",
    "./dist"
  ]
}
